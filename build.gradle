// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

String mc_version = "1.8.8"
String mod_version = "2.0.0-BETA"
boolean isDrone = System.getenv("DRONE") == "true";
version = "${mod_version}-${mc_version}"
group = "dk.mrspring"
String commit, buildNumber, branch;
if (isDrone) {
    commit = System.getenv("DRONE_COMMIT").take(7)
    buildNumber = System.getenv("DRONE_BUILD_NUMBER")
    branch = System.getenv("DRONE_BRANCH")
    version += "-${commit}-${buildNumber}-${branch}"
}
archivesBaseName = "TheWastelandMod2"

minecraft {
    version = "1.8.8-11.15.0.1655"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20151122"
}

dependencies {
}

sourceJar() {
    from(sourceSets.main.java)
    classifier = "src"
}

task devJar(type: Jar) {
    from(sourceSets.main.output)
    classifier = "deobf"
}

artifacts {
    archives sourceJar, devJar
}

import groovy.json.JsonOutput

task buildInfo << {
    String jsonCode = JsonOutput.toJson(new BuildInformation(
            commit: commit,
            build_number: Integer.valueOf(buildNumber),
            branch: branch,
            mod_version: mod_version,
            mc_version: mc_version,
            commit_full: System.getenv("DRONE_COMMIT"),
            build_time: System.currentTimeMillis() / 1000L,
            files: ["api", "deobf", "src"]));
    File infoFile = new File("build/libs/${archivesBaseName}-${project.version}.json")
    println(infoFile.toString());
    infoFile.createNewFile()
    infoFile.setText(jsonCode)
}
buildInfo.enabled = isDrone;
build.finalizedBy buildInfo

class BuildInformation {
    String commit, branch, mod_version, mc_version, commit_full;
    String[] files;
    int build_number;
    long build_time;
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
